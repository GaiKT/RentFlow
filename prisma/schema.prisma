// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  name         String
  phone        String?
  profileImage String?
  role         UserRole @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  rooms         Room[]
  contracts     Contract[]
  invoices      Invoice[]
  receipts      Receipt[]
  notifications Notification[]

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

model Room {
  id          String     @id @default(cuid())
  name        String
  description String?
  address     String?
  rent        Float
  deposit     Float?
  status      RoomStatus @default(AVAILABLE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  ownerId   String
  owner     User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  contracts Contract[]
  invoices  Invoice[]
  receipts  Receipt[]

  @@map("rooms")
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  UNAVAILABLE
}

model Contract {
  id           String         @id @default(cuid())
  startDate    DateTime
  endDate      DateTime
  rent         Float
  deposit      Float?
  status       ContractStatus @default(ACTIVE)
  tenantName   String
  tenantPhone  String?
  tenantEmail  String?
  terms        String?
  notes        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  roomId   String
  room     Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  ownerId  String
  owner    User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  documents Document[]
  invoices  Invoice[]
  receipts  Receipt[]

  @@map("contracts")
}

enum ContractStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  PENDING
}

model Document {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Invoice {
  id          String        @id @default(cuid())
  invoiceNo   String        @unique
  amount      Float
  dueDate     DateTime
  description String?
  status      InvoiceStatus @default(PENDING)
  issuedAt    DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  roomId     String
  room       Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  contractId String?
  contract   Contract? @relation(fields: [contractId], references: [id], onDelete: SetNull)
  ownerId    String
  owner      User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  receipts Receipt[]

  @@map("invoices")
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

model Receipt {
  id        String   @id @default(cuid())
  receiptNo String   @unique
  amount    Float
  paidAt    DateTime @default(now())
  method    String   @default("cash")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoiceId  String
  invoice    Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  roomId     String
  room       Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  contractId String?
  contract   Contract? @relation(fields: [contractId], references: [id], onDelete: SetNull)
  ownerId    String
  owner      User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("receipts")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  CONTRACT_EXPIRY
  RENT_DUE
  PAYMENT_RECEIVED
  MAINTENANCE
  GENERAL
}
