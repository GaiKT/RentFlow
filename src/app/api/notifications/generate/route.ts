import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

export async function POST(request: NextRequest) {
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (30 ‡∏ß‡∏±‡∏ô, 7 ‡∏ß‡∏±‡∏ô, 1 ‡∏ß‡∏±‡∏ô)
    const now = new Date();
    const thirtyDaysLater = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);
    const sevenDaysLater = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
    const oneDayLater = new Date(now.getTime() + 1 * 24 * 60 * 60 * 1000);
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞
    const upcomingInvoices = await prisma.invoice.findMany({
      where: {
        status: 'PENDING',
        dueDate: {
          lte: thirtyDaysLater,
          gte: now,
        },
      },
      include: {
        room: true,
        contract: true,
        owner: true,
      },
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ
    for (const invoice of upcomingInvoices) {
      const daysUntilDue = Math.ceil((new Date(invoice.dueDate).getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
      
      let notificationTitle = '';
      let notificationMessage = '';
      let notificationType: 'RENT_DUE' = 'RENT_DUE';

      if (daysUntilDue <= 1) {
        notificationTitle = '‚ö†Ô∏è ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ!';
        notificationMessage = `‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ ${invoice.invoiceNo} ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${invoice.room.name} ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${new Intl.NumberFormat('th-TH', { style: 'currency', currency: 'THB' }).format(invoice.amount)}`;
      } else if (daysUntilDue <= 7) {
        notificationTitle = 'üìÖ ‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤';
        notificationMessage = `‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ ${invoice.invoiceNo} ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${invoice.room.name} ‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${daysUntilDue} ‡∏ß‡∏±‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${new Intl.NumberFormat('th-TH', { style: 'currency', currency: 'THB' }).format(invoice.amount)}`;
      } else if (daysUntilDue <= 30) {
        notificationTitle = 'üìã ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤';
        notificationMessage = `‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ ${invoice.invoiceNo} ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${invoice.room.name} ‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${daysUntilDue} ‡∏ß‡∏±‡∏ô`;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const existingNotification = await prisma.notification.findFirst({
        where: {
          userId: invoice.ownerId,
          title: notificationTitle,
          message: {
            contains: invoice.invoiceNo,
          },
          createdAt: {
            gte: new Date(now.getTime() - 24 * 60 * 60 * 1000), // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
          },
        },
      });

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      if (!existingNotification) {
        await prisma.notification.create({
          data: {
            title: notificationTitle,
            message: notificationMessage,
            type: notificationType,
            userId: invoice.ownerId,
            read: false,
          },
        });
      }
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const upcomingContracts = await prisma.contract.findMany({
      where: {
        status: 'ACTIVE',
        endDate: {
          lte: thirtyDaysLater,
          gte: now,
        },
      },
      include: {
        room: true,
        owner: true,
      },
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    for (const contract of upcomingContracts) {
      const daysUntilExpiry = Math.ceil((new Date(contract.endDate).getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
      
      let notificationTitle = '';
      let notificationMessage = '';
      let notificationType: 'CONTRACT_EXPIRY' = 'CONTRACT_EXPIRY';

      if (daysUntilExpiry <= 1) {
        notificationTitle = '‚ö†Ô∏è ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ!';
        notificationMessage = `‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${contract.room.name} (‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤: ${contract.tenantName}) ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ`;
      } else if (daysUntilExpiry <= 7) {
        notificationTitle = 'üìã ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏';
        notificationMessage = `‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${contract.room.name} (‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤: ${contract.tenantName}) ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${daysUntilExpiry} ‡∏ß‡∏±‡∏ô`;
      } else if (daysUntilExpiry <= 30) {
        notificationTitle = 'üìÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤';
        notificationMessage = `‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${contract.room.name} (‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤: ${contract.tenantName}) ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${daysUntilExpiry} ‡∏ß‡∏±‡∏ô`;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const existingNotification = await prisma.notification.findFirst({
        where: {
          userId: contract.ownerId,
          title: notificationTitle,
          message: {
            contains: contract.room.name,
          },
          createdAt: {
            gte: new Date(now.getTime() - 24 * 60 * 60 * 1000),
          },
        },
      });

      if (!existingNotification) {
        await prisma.notification.create({
          data: {
            title: notificationTitle,
            message: notificationMessage,
            type: notificationType,
            userId: contract.ownerId,
            read: false,
          },
        });
      }
    }

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
    const totalInvoiceNotifications = upcomingInvoices.length;
    const totalContractNotifications = upcomingContracts.length;

    return NextResponse.json({
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      invoiceNotifications: totalInvoiceNotifications,
      contractNotifications: totalContractNotifications,
      total: totalInvoiceNotifications + totalContractNotifications,
    });
  } catch (error) {
    console.error("Error creating notifications:", error);
    return NextResponse.json(
      { message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" },
      { status: 500 }
    );
  }
}
