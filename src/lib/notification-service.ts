/**
 * Notification Service - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå
 */
import { prisma } from './prisma';
import { NotificationType } from '@prisma/client';

export interface NotificationData {
  title: string;
  message: string;
  type: NotificationType;
  userId: string;
}

export const NotificationTypeLabels = {
  [NotificationType.CONTRACT_EXPIRY]: {
    label: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
    icon: 'üìã',
    color: 'warning'
  },
  [NotificationType.RENT_DUE]: {
    label: '‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞',
    icon: 'üí∞',
    color: 'info'
  },
  [NotificationType.PAYMENT_RECEIVED]: {
    label: '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
    icon: '‚úÖ',
    color: 'success'
  },
  [NotificationType.MAINTENANCE]: {
    label: '‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤',
    icon: 'üîß',
    color: 'warning'
  },
  [NotificationType.GENERAL]: {
    label: '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
    icon: 'üì¢',
    color: 'info'
  },
  [NotificationType.INVOICE_CREATED]: {
    label: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ',
    icon: 'üìÑ',
    color: 'info'
  },
  [NotificationType.CONTRACT_CREATED]: {
    label: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏´‡∏°‡πà',
    icon: 'üìù',
    color: 'success'
  },
  [NotificationType.CONTRACT_TERMINATED]: {
    label: '‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
    icon: '‚ùå',
    color: 'error'
  },
  [NotificationType.INVOICE_OVERDUE]: {
    label: '‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞',
    icon: '‚ö†Ô∏è',
    color: 'error'
  },
  [NotificationType.ROOM_STATUS_CHANGED]: {
    label: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á',
    icon: 'üè†',
    color: 'info'
  },
  [NotificationType.MONTHLY_REPORT]: {
    label: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
    icon: 'üìä',
    color: 'info'
  }
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
export async function createNotification(data: NotificationData): Promise<void> {
  try {
    await prisma.notification.create({
      data: {
        title: data.title,
        message: data.message,
        type: data.type,
        userId: data.userId,
        read: false
      }
    });
  } catch (error) {
    console.error('Error creating notification:', error);
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
 */
export async function createBulkNotifications(notifications: NotificationData[]): Promise<void> {
  try {
    await prisma.notification.createMany({
      data: notifications.map(notif => ({
        title: notif.title,
        message: notif.message,
        type: notif.type,
        userId: notif.userId,
        read: false
      }))
    });
  } catch (error) {
    console.error('Error creating bulk notifications:', error);
  }
}

/**
 * ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
 */
export async function notifyPaymentReceived(receiptData: {
  receiptNo: string;
  amount: number;
  roomName: string;
  tenantName?: string;
  ownerId: string;
}): Promise<void> {
  const notification: NotificationData = {
    title: '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
    message: `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ${new Intl.NumberFormat('th-TH', { style: 'currency', currency: 'THB' }).format(receiptData.amount)} ‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á ${receiptData.roomName}${receiptData.tenantName ? ` (${receiptData.tenantName})` : ''} ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à #${receiptData.receiptNo}`,
    type: NotificationType.PAYMENT_RECEIVED,
    userId: receiptData.ownerId
  };

  await createNotification(notification);
}

/**
 * ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ
 */
export async function notifyInvoiceCreated(invoiceData: {
  invoiceNo: string;
  amount: number;
  roomName: string;
  tenantName?: string;
  dueDate: Date;
  ownerId: string;
}): Promise<void> {
  const dueDateStr = invoiceData.dueDate.toLocaleDateString('th-TH', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  const notification: NotificationData = {
    title: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà',
    message: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ #${invoiceData.invoiceNo} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${new Intl.NumberFormat('th-TH', { style: 'currency', currency: 'THB' }).format(invoiceData.amount)} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á ${invoiceData.roomName}${invoiceData.tenantName ? ` (${invoiceData.tenantName})` : ''} ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞ ${dueDateStr}`,
    type: NotificationType.INVOICE_CREATED,
    userId: invoiceData.ownerId
  };

  await createNotification(notification);
}

/**
 * ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏´‡∏°‡πà
 */
export async function notifyContractCreated(contractData: {
  roomName: string;
  tenantName: string;
  rent: number;
  startDate: Date;
  endDate: Date;
  ownerId: string;
}): Promise<void> {
  const startDateStr = contractData.startDate.toLocaleDateString('th-TH');
  const endDateStr = contractData.endDate.toLocaleDateString('th-TH');

  const notification: NotificationData = {
    title: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà',
    message: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á ${contractData.roomName} ‡∏Å‡∏±‡∏ö ${contractData.tenantName} ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤ ${new Intl.NumberFormat('th-TH', { style: 'currency', currency: 'THB' }).format(contractData.rent)}/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ ${startDateStr} - ${endDateStr}`,
    type: NotificationType.CONTRACT_CREATED,
    userId: contractData.ownerId
  };

  await createNotification(notification);
}

/**
 * ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤
 */
export async function notifyContractTerminated(contractData: {
  roomName: string;
  tenantName: string;
  endDate: Date;
  reason?: string;
  ownerId: string;
}): Promise<void> {
  const endDateStr = contractData.endDate.toLocaleDateString('th-TH');

  const notification: NotificationData = {
    title: '‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤',
    message: `‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á ${contractData.roomName} ‡∏Å‡∏±‡∏ö ${contractData.tenantName} ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß (${endDateStr})${contractData.reason ? ` ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${contractData.reason}` : ''}`,
    type: NotificationType.CONTRACT_TERMINATED,
    userId: contractData.ownerId
  };

  await createNotification(notification);
}

/**
 * ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î
 */
export async function notifyInvoiceOverdue(invoiceData: {
  invoiceNo: string;
  amount: number;
  roomName: string;
  tenantName?: string;
  dueDate: Date;
  daysPastDue: number;
  ownerId: string;
}): Promise<void> {
  const dueDateStr = invoiceData.dueDate.toLocaleDateString('th-TH');

  const notification: NotificationData = {
    title: '‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
    message: `‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ #${invoiceData.invoiceNo} ‡∏´‡πâ‡∏≠‡∏á ${invoiceData.roomName}${invoiceData.tenantName ? ` (${invoiceData.tenantName})` : ''} ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß ${invoiceData.daysPastDue} ‡∏ß‡∏±‡∏ô (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞: ${dueDateStr}) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${new Intl.NumberFormat('th-TH', { style: 'currency', currency: 'THB' }).format(invoiceData.amount)}`,
    type: NotificationType.INVOICE_OVERDUE,
    userId: invoiceData.ownerId
  };

  await createNotification(notification);
}

/**
 * ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á
 */
export async function notifyRoomStatusChanged(roomData: {
  roomName: string;
  oldStatus: string;
  newStatus: string;
  ownerId: string;
}): Promise<void> {
  const statusLabels: Record<string, string> = {
    'AVAILABLE': '‡∏ß‡πà‡∏≤‡∏á',
    'OCCUPIED': '‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤',
    'MAINTENANCE': '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°',
    'UNAVAILABLE': '‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
  };

  const notification: NotificationData = {
    title: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á',
    message: `‡∏´‡πâ‡∏≠‡∏á ${roomData.roomName} ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å "${statusLabels[roomData.oldStatus] || roomData.oldStatus}" ‡πÄ‡∏õ‡πá‡∏ô "${statusLabels[roomData.newStatus] || roomData.newStatus}"`,
    type: NotificationType.ROOM_STATUS_CHANGED,
    userId: roomData.ownerId
  };

  await createNotification(notification);
}

/**
 * ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤
 */
export async function notifyMaintenance(maintenanceData: {
  roomName: string;
  issue: string;
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  ownerId: string;
}): Promise<void> {
  const priorityLabels = {
    'LOW': '‡∏ï‡πà‡∏≥',
    'MEDIUM': '‡∏Å‡∏•‡∏≤‡∏á', 
    'HIGH': '‡∏™‡∏π‡∏á',
    'URGENT': '‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô'
  };

  const priorityIcons = {
    'LOW': 'üîß',
    'MEDIUM': 'üîß',
    'HIGH': '‚ö†Ô∏è',
    'URGENT': 'üö®'
  };

  const notification: NotificationData = {
    title: `${priorityIcons[maintenanceData.priority]} ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á`,
    message: `‡∏´‡πâ‡∏≠‡∏á ${maintenanceData.roomName} ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á: ${maintenanceData.issue} (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ${priorityLabels[maintenanceData.priority]})`,
    type: NotificationType.MAINTENANCE,
    userId: maintenanceData.ownerId
  };

  await createNotification(notification);
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 */
export async function createMonthlyReport(userId: string): Promise<void> {
  try {
    const now = new Date();
    const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);

    // Get monthly statistics
    const [totalRevenue, totalInvoices, totalReceipts, overdueInvoices] = await Promise.all([
      // Total revenue this month
      prisma.receipt.aggregate({
        where: {
          ownerId: userId,
          paidAt: {
            gte: firstDayOfMonth,
            lte: lastDayOfMonth
          }
        },
        _sum: {
          amount: true
        }
      }),
      // Total invoices created this month
      prisma.invoice.count({
        where: {
          ownerId: userId,
          issuedAt: {
            gte: firstDayOfMonth,
            lte: lastDayOfMonth
          }
        }
      }),
      // Total receipts this month
      prisma.receipt.count({
        where: {
          ownerId: userId,
          paidAt: {
            gte: firstDayOfMonth,
            lte: lastDayOfMonth
          }
        }
      }),
      // Overdue invoices
      prisma.invoice.count({
        where: {
          ownerId: userId,
          status: 'OVERDUE'
        }
      })
    ]);

    const monthName = now.toLocaleDateString('th-TH', { month: 'long', year: 'numeric' });
    const revenue = totalRevenue._sum.amount || 0;

    const notification: NotificationData = {
      title: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
      message: `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ${monthName}: ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö ${new Intl.NumberFormat('th-TH', { style: 'currency', currency: 'THB' }).format(revenue)} | ‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ ${totalInvoices} ‡πÉ‡∏ö | ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ${totalReceipts} ‡πÉ‡∏ö${overdueInvoices > 0 ? ` | ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î ${overdueInvoices} ‡πÉ‡∏ö` : ''}`,
      type: NotificationType.MONTHLY_REPORT,
      userId: userId
    };

    await createNotification(notification);
  } catch (error) {
    console.error('Error creating monthly report:', error);
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î
 */
export async function generateReminderNotifications(): Promise<void> {
  try {
    const now = new Date();
    const notifications: NotificationData[] = [];

    // Contract expiry reminders (30, 7, 1 days before)
    const contractReminders = await Promise.all([
      // 30 days before
      prisma.contract.findMany({
        where: {
          status: 'ACTIVE',
          endDate: {
            gte: new Date(now.getTime() + 29 * 24 * 60 * 60 * 1000),
            lte: new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000)
          }
        },
        include: {
          room: { select: { name: true } },
          owner: { select: { id: true } }
        }
      }),
      // 7 days before
      prisma.contract.findMany({
        where: {
          status: 'ACTIVE',
          endDate: {
            gte: new Date(now.getTime() + 6 * 24 * 60 * 60 * 1000),
            lte: new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)
          }
        },
        include: {
          room: { select: { name: true } },
          owner: { select: { id: true } }
        }
      }),
      // 1 day before
      prisma.contract.findMany({
        where: {
          status: 'ACTIVE',
          endDate: {
            gte: new Date(now.getTime() + 0 * 24 * 60 * 60 * 1000),
            lte: new Date(now.getTime() + 1 * 24 * 60 * 60 * 1000)
          }
        },
        include: {
          room: { select: { name: true } },
          owner: { select: { id: true } }
        }
      })
    ]);

    const reminderDays = [30, 7, 1];
    contractReminders.forEach((contracts, index) => {
      const days = reminderDays[index];
      contracts.forEach((contract) => {
        const endDateStr = contract.endDate.toLocaleDateString('th-TH');
        notifications.push({
          title: `‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (${days} ‡∏ß‡∏±‡∏ô)`,
          message: `‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á ${contract.room.name} ‡∏Å‡∏±‡∏ö ${contract.tenantName} ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${days} ‡∏ß‡∏±‡∏ô (${endDateStr})`,
          type: NotificationType.CONTRACT_EXPIRY,
          userId: contract.owner.id
        });
      });
    });

    // Invoice due reminders (30, 7, 1 days before)
    const invoiceReminders = await Promise.all([
      // 30 days before
      prisma.invoice.findMany({
        where: {
          status: 'PENDING',
          dueDate: {
            gte: new Date(now.getTime() + 29 * 24 * 60 * 60 * 1000),
            lte: new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000)
          }
        },
        include: {
          room: { select: { name: true } },
          contract: { select: { tenantName: true } },
          owner: { select: { id: true } }
        }
      }),
      // 7 days before
      prisma.invoice.findMany({
        where: {
          status: 'PENDING',
          dueDate: {
            gte: new Date(now.getTime() + 6 * 24 * 60 * 60 * 1000),
            lte: new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)
          }
        },
        include: {
          room: { select: { name: true } },
          contract: { select: { tenantName: true } },
          owner: { select: { id: true } }
        }
      }),
      // 1 day before
      prisma.invoice.findMany({
        where: {
          status: 'PENDING',
          dueDate: {
            gte: new Date(now.getTime() + 0 * 24 * 60 * 60 * 1000),
            lte: new Date(now.getTime() + 1 * 24 * 60 * 60 * 1000)
          }
        },
        include: {
          room: { select: { name: true } },
          contract: { select: { tenantName: true } },
          owner: { select: { id: true } }
        }
      })
    ]);

    invoiceReminders.forEach((invoices, index) => {
      const days = reminderDays[index];
      invoices.forEach((invoice) => {
        const dueDateStr = invoice.dueDate.toLocaleDateString('th-TH');
        notifications.push({
          title: `‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞ (${days} ‡∏ß‡∏±‡∏ô)`,
          message: `‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ #${invoice.invoiceNo} ‡∏´‡πâ‡∏≠‡∏á ${invoice.room.name}${invoice.contract?.tenantName ? ` (${invoice.contract.tenantName})` : ''} ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${days} ‡∏ß‡∏±‡∏ô (${dueDateStr}) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${new Intl.NumberFormat('th-TH', { style: 'currency', currency: 'THB' }).format(invoice.amount)}`,
          type: NotificationType.RENT_DUE,
          userId: invoice.owner.id
        });
      });
    });

    // Check for overdue invoices
    const overdueInvoices = await prisma.invoice.findMany({
      where: {
        status: 'PENDING',
        dueDate: {
          lt: now
        }
      },
      include: {
        room: { select: { name: true } },
        contract: { select: { tenantName: true } },
        owner: { select: { id: true } }
      }
    });

    // Process overdue invoices
    for (const invoice of overdueInvoices) {
      const daysPastDue = Math.floor((now.getTime() - invoice.dueDate.getTime()) / (1000 * 60 * 60 * 24));
      if (daysPastDue > 0) {
        notifications.push({
          title: '‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
          message: `‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ #${invoice.invoiceNo} ‡∏´‡πâ‡∏≠‡∏á ${invoice.room.name}${invoice.contract?.tenantName ? ` (${invoice.contract.tenantName})` : ''} ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß ${daysPastDue} ‡∏ß‡∏±‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${new Intl.NumberFormat('th-TH', { style: 'currency', currency: 'THB' }).format(invoice.amount)}`,
          type: NotificationType.INVOICE_OVERDUE,
          userId: invoice.owner.id
        });

        // Update invoice status to OVERDUE
        await prisma.invoice.update({
          where: { id: invoice.id },
          data: { status: 'OVERDUE' }
        });
      }
    }

    // Create all notifications
    if (notifications.length > 0) {
      await createBulkNotifications(notifications);
      console.log(`Created ${notifications.length} reminder notifications`);
    }

  } catch (error) {
    console.error('Error generating reminder notifications:', error);
  }
}

/**
 * ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 30 ‡∏ß‡∏±‡∏ô)
 */
export async function cleanupOldNotifications(): Promise<void> {
  try {
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

    const result = await prisma.notification.deleteMany({
      where: {
        createdAt: {
          lt: thirtyDaysAgo
        }
      }
    });

    console.log(`Cleaned up ${result.count} old notifications`);
  } catch (error) {
    console.error('Error cleaning up old notifications:', error);
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
export async function getNotificationStats(userId: string): Promise<{
  total: number;
  unread: number;
  byType: Record<string, number>;
}> {
  try {
    const [total, unread, byType] = await Promise.all([
      prisma.notification.count({
        where: { userId }
      }),
      prisma.notification.count({
        where: { userId, read: false }
      }),
      prisma.notification.groupBy({
        by: ['type'],
        where: { userId },
        _count: { type: true }
      })
    ]);

    const typeStats: Record<string, number> = {};
    byType.forEach(item => {
      typeStats[item.type] = item._count.type;
    });

    return { total, unread, byType: typeStats };
  } catch (error) {
    console.error('Error getting notification stats:', error);
    return { total: 0, unread: 0, byType: {} };
  }
}
