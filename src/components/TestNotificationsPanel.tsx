import { useState } from 'react';
import { toast } from 'react-hot-toast';
import { useLocalStorage } from '@/hooks/useLocalStorage';

interface TestNotificationsPanelProps {
  onRefresh?: () => void;
}

export default function TestNotificationsPanel({ onRefresh }: TestNotificationsPanelProps) {
  const [loading, setLoading] = useState(false);
  const [token, , isClient] = useLocalStorage('token');

  const handleCreateTestNotifications = async (type: string = 'all') => {
    if (!isClient || !token) {
      toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }
    
    setLoading(true);
    try {

      const response = await fetch('/api/notifications/test', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ type })
      });

      if (response.ok) {
        const data = await response.json();
        toast.success(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ${data.created} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // Refresh notifications
        if (onRefresh) {
          setTimeout(() => {
            onRefresh();
          }, 500);
        }
      } else {
        const error = await response.json();
        toast.error(error.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      }
    } catch (error) {
      console.error('Error creating test notifications:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
    } finally {
      setLoading(false);
    }
  };

  // Don't render until client-side hydration is complete
  if (!isClient) {
    return (
      <div className="bg-base-100 p-6 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold mb-4 text-primary">üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h3>
        <div className="flex justify-center items-center h-32">
          <span className="loading loading-spinner loading-lg"></span>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-base-100 p-6 rounded-lg shadow-md">
      <h3 className="text-lg font-semibold mb-4 text-primary">üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
        <button
          onClick={() => handleCreateTestNotifications('all')}
          disabled={loading || !isClient}
          className="btn btn-primary btn-sm"
        >
          {loading ? (
            <>
              <span className="loading loading-spinner loading-xs"></span>
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...
            </>
          ) : (
            'üì¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'
          )}
        </button>

        <button
          onClick={() => handleCreateTestNotifications('PAYMENT_RECEIVED')}
          disabled={loading || !isClient}
          className="btn btn-success btn-sm"
        >
          üí∞ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        </button>

        <button
          onClick={() => handleCreateTestNotifications('INVOICE_CREATED')}
          disabled={loading || !isClient}
          className="btn btn-info btn-sm"
        >
          üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ
        </button>

        <button
          onClick={() => handleCreateTestNotifications('CONTRACT_CREATED')}
          disabled={loading || !isClient}
          className="btn btn-secondary btn-sm"
        >
          üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤
        </button>

        <button
          onClick={() => handleCreateTestNotifications('CONTRACT_EXPIRY')}
          disabled={loading || !isClient}
          className="btn btn-warning btn-sm"
        >
          ‚è∞ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        </button>

        <button
          onClick={() => handleCreateTestNotifications('RENT_DUE')}
          disabled={loading || !isClient}
          className="btn btn-accent btn-sm"
        >
          üí∏ ‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        </button>

        <button
          onClick={() => handleCreateTestNotifications('INVOICE_OVERDUE')}
          disabled={loading || !isClient}
          className="btn btn-error btn-sm"
        >
          ‚ö†Ô∏è ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        </button>

        <button
          onClick={() => handleCreateTestNotifications('MAINTENANCE')}
          disabled={loading || !isClient}
          className="btn btn-neutral btn-sm"
        >
          üîß ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°
        </button>

        <button
          onClick={() => handleCreateTestNotifications('MONTHLY_REPORT')}
          disabled={loading || !isClient}
          className="btn btn-ghost btn-sm"
        >
          üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        </button>
      </div>

      <div className="alert alert-info">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" className="stroke-current shrink-0 w-6 h-6">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <div>
          <div className="font-bold">‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</div>
          <div className="text-sm">
            ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏î‡∏π‡πÉ‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á Navbar
          </div>
        </div>
      </div>
    </div>
  );
}
