'use client'

import React from 'react'
import { format } from 'date-fns'
import { th } from 'date-fns/locale'
import type { ActivityLogWithRelations } from '@/types'

interface ActivityLogItemProps {
  log: ActivityLogWithRelations
  showUser?: boolean
}

export function ActivityLogItem({ log, showUser = true }: ActivityLogItemProps) {
  const getActionIcon = (action: string) => {
    switch (action) {
      case 'USER_LOGIN':
        return 'üîê'
      case 'USER_LOGOUT':
        return 'üö™'
      case 'USER_REGISTER':
        return 'üëã'
      case 'USER_PROFILE_UPDATE':
        return 'üë§'
      case 'USER_PASSWORD_CHANGE':
        return 'üîë'
      case 'ROOM_CREATE':
        return 'üè†'
      case 'ROOM_UPDATE':
        return '‚úèÔ∏è'
      case 'ROOM_DELETE':
        return 'üóëÔ∏è'
      case 'ROOM_STATUS_CHANGE':
        return 'üîÑ'
      case 'CONTRACT_CREATE':
        return 'üìù'
      case 'CONTRACT_UPDATE':
        return 'üìã'
      case 'CONTRACT_DELETE':
        return '‚ùå'
      case 'CONTRACT_TERMINATE':
        return 'üîö'
      case 'INVOICE_CREATE':
        return 'üí∞'
      case 'INVOICE_UPDATE':
        return 'üìÑ'
      case 'INVOICE_MARK_PAID':
        return '‚úÖ'
      case 'INVOICE_MARK_OVERDUE':
        return '‚ö†Ô∏è'
      case 'RECEIPT_CREATE':
        return 'üßæ'
      case 'RECEIPT_UPDATE':
        return 'üìù'
      default:
        return 'üìå'
    }
  }

  const getActionColor = (action: string) => {
    switch (action) {
      case 'USER_LOGIN':
      case 'USER_REGISTER':
        return 'text-success'
      case 'USER_LOGOUT':
        return 'text-base-content/70'
      case 'ROOM_CREATE':
      case 'CONTRACT_CREATE':
      case 'INVOICE_CREATE':
      case 'RECEIPT_CREATE':
        return 'text-info'
      case 'ROOM_UPDATE':
      case 'CONTRACT_UPDATE':
      case 'INVOICE_UPDATE':
      case 'RECEIPT_UPDATE':
      case 'USER_PROFILE_UPDATE':
        return 'text-warning'
      case 'ROOM_DELETE':
      case 'CONTRACT_DELETE':
      case 'CONTRACT_TERMINATE':
        return 'text-error'
      case 'INVOICE_MARK_PAID':
        return 'text-success'
      case 'INVOICE_MARK_OVERDUE':
        return 'text-warning'
      default:
        return 'text-base-content/70'
    }
  }

  const formatActionText = (action: string) => {
    const actionMap: Record<string, string> = {
      USER_LOGIN: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
      USER_LOGOUT: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
      USER_REGISTER: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
      USER_PROFILE_UPDATE: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå',
      USER_PASSWORD_CHANGE: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
      ROOM_CREATE: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á',
      ROOM_UPDATE: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á',
      ROOM_DELETE: '‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á',
      ROOM_STATUS_CHANGE: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á',
      CONTRACT_CREATE: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
      CONTRACT_UPDATE: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
      CONTRACT_DELETE: '‡∏•‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
      CONTRACT_TERMINATE: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
      CONTRACT_RENEW: '‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
      INVOICE_CREATE: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ',
      INVOICE_UPDATE: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ',
      INVOICE_DELETE: '‡∏•‡∏ö‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ',
      INVOICE_MARK_PAID: '‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß',
      INVOICE_MARK_OVERDUE: '‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
      RECEIPT_CREATE: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à',
      RECEIPT_UPDATE: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à',
      RECEIPT_DELETE: '‡∏•‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à',
    }
    return actionMap[action] || action
  }

  return (
    <div className="flex items-start space-x-3 p-4 border-b border-base-300 hover:bg-base-200 transition-colors">
      <div className="flex-shrink-0">
        <span className="text-2xl">{getActionIcon(log.action)}</span>
      </div>
      
      <div className="flex-1 min-w-0">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <span className={`font-medium ${getActionColor(log.action)}`}>
              {formatActionText(log.action)}
            </span>
            {log.entityName && (
              <span className="text-sm text-base-content/60">
                ({log.entityName})
              </span>
            )}
          </div>
          <time className="text-xs text-base-content/50">
            {format(new Date(log.createdAt), 'dd/MM/yyyy HH:mm', { locale: th })}
          </time>
        </div>
        
        <p className="text-sm text-base-content/80 mt-1">
          {log.description}
        </p>
        
        {showUser && log.user && (
          <div className="flex items-center space-x-2 mt-2">
            {log.user.profileImage && (
              <img
                src={log.user.profileImage}
                alt={log.user.name}
                className="w-6 h-6 rounded-full"
              />
            )}
            <span className="text-xs text-base-content/50">
              ‡πÇ‡∏î‡∏¢ {log.user.name}
            </span>
          </div>
        )}
        
        {log.metadata && Object.keys(log.metadata).length > 0 && (
          <details className="mt-2">
            <summary className="text-xs text-base-content/50 cursor-pointer hover:text-base-content/70">
              ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            </summary>
            <pre className="text-xs text-base-content/60 mt-1 bg-base-200 p-2 rounded overflow-x-auto">
              {JSON.stringify(log.metadata, null, 2)}
            </pre>
          </details>
        )}
      </div>
    </div>
  )
}

interface ActivityLogListProps {
  logs: ActivityLogWithRelations[]
  loading?: boolean
  showUser?: boolean
  emptyMessage?: string
}

export function ActivityLogList({ 
  logs, 
  loading = false, 
  showUser = true,
  emptyMessage = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°'
}: ActivityLogListProps) {
  if (loading) {
    return (
      <div className="flex justify-center items-center p-8">
        <div className="loading loading-spinner loading-lg text-primary"></div>
      </div>
    )
  }

  if (logs.length === 0) {
    return (
      <div className="text-center p-8 text-base-content/50">
        <div className="text-4xl mb-2">üìã</div>
        <p>{emptyMessage}</p>
      </div>
    )
  }

  return (
    <div className="card bg-base-100 shadow-sm border border-base-300">
      {logs.map((log) => (
        <ActivityLogItem 
          key={log.id} 
          log={log} 
          showUser={showUser}
        />
      ))}
    </div>
  )
}
